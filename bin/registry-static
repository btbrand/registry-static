#!/usr/bin/env node
/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License.
See LICENSE file.
*/
var exec = require('child_process').spawn;
var argv = process.argv.slice(2);
var path = require('path');
var args = require('../lib/args');
var options = args();

if (options.help || options.version) {
    require('../lib/index');
    return;
}

argv.unshift(path.join(__dirname, '../lib/background.js'));
console.log('\n\n--------------------------------');
console.log('starting background task..');
console.log('--------------------------------\n\n');
var proc = 0;
var run = function() {
    proc++;
    if (proc >= options.spawn) {
        console.log('\n\n--------------------------------');
        console.log('spawn cap %s hit, bailing..', options.spawn);
        console.log('--------------------------------\n\n');
        process.exit(1);
    }
    process.env.PROC_SPAWN = proc;
    var child = exec(process.execPath, argv, {
        cwd: process.cwd(),
        env: process.env,
        stdio: 'inherit'
    });
    var a = [];
    var sinceAdded;
    argv.forEach(function(item) {
        switch (item) {
            case '--clean':
                break;
            case '--since':
                sinceAdded = true;
                break;
            default:
                if (sinceAdded) {
                    sinceAdded = null;
                    break;
                }
                a.push(item);
                break;
        }
    });
    argv = a;

    child.on('close', function(code) {
        if (code >= 250) {
            //Internal error..
            process.exit(1);
        }
        console.log('\n\n--------------------------------');
        console.log('subprocess exited with code', code, 'restarting process..');
        console.log('--------------------------------\n\n');
        run();
    });
};

//Start the script in a child process, restarting on error..
run();
